{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/FeesCard.tsx","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/FeesCell.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","secondPart","FeesContainer","FeesCard","fees","justifyContent","small","harvestFee","depositFee","taxWithdraw","hr","cardBorder","LinksWrapper","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","width","height","Divider","mb","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","address","TokenImage","variant","primaryToken","secondaryToken","flexDirection","split","ml","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","PCS_URL","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","FeesCell","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","SearchWrapper","FARM_TYPES","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","farmType","setFarmType","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","stakedOnlyFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","stableTokens","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","PageHeader","as","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/7.18613cb6.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${ ( { theme } ) => theme.colors.primary };\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ( { onClick, expanded } ) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={ t( 'Hide or show expandable content' ) } role=\"button\" onClick={ () => onClick() }>\n      <Text color=\"primary\" bold>\n        { expanded ? t( 'Hide' ) : t( 'Details' ) }\n      </Text>\n      { expanded ? <ChevronUpIcon/> : <ChevronDownIcon/> }\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n\nconst getLiquidityUrlPathParts = ( {\n                                     quoteTokenAddress,\n                                     tokenAddress,\n                                   }: {\n  quoteTokenAddress: string\n  tokenAddress: string\n} ): string => {\n  const firstPart = quoteTokenAddress ?? 'WBNB'\n  const secondPart = tokenAddress ?? 'WBNB'\n  return `${ firstPart }/${ secondPart }`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { Flex, Text } from 'uikit'\nimport styled from 'styled-components'\nimport { FeesProps } from 'state/types'\n\ninterface FeesCardProps {\n  fees: FeesProps\n}\n\nconst FeesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst FeesCard: React.FC<FeesCardProps> = ( { fees } ) => (\n  <FeesContainer>\n    <Flex justifyContent=\"space-between\">\n      <Text small>Harvest Fee:</Text>\n      {\n        fees?.harvestFee ?\n          <Text small bold>{ `${ fees.harvestFee / 100 }%` }</Text> :\n          <Text small>-</Text>\n      }\n    </Flex>\n    <Flex justifyContent=\"space-between\">\n      <Text small>Deposit Fee:</Text>\n      {\n        fees?.depositFee ?\n          <Text small bold>{ `${ fees.depositFee / 100 }%` }</Text> :\n          <Text small>-</Text>\n      }\n    </Flex>\n    <Flex justifyContent=\"space-between\">\n      <Text small>Withdraw Fee:</Text>\n      {\n        fees?.taxWithdraw ?\n          <Text small bold>{ `${ fees.taxWithdraw / 100 }%` }</Text> :\n          <Text small>-</Text>\n      }\n    </Flex>\n  </FeesContainer>\n)\n\nexport default FeesCard\n","import styled from 'styled-components'\n\nexport default styled.hr`\n  border-color: ${ ( { theme } ) => theme.colors.cardBorder };\n  border-style: solid;\n  border-width: 1px 0 0;\n  margin: 4px 0;\n`\n","import React from 'react';\nimport { useTranslation } from 'contexts/Localization';\nimport styled from 'styled-components';\nimport { Flex, LinkExternal, Skeleton, Text } from 'uikit';\nimport { FeesProps } from 'state/types';\nimport FeesCard from './FeesCard';\nimport Divider from '../Divider';\n\nexport interface ExpandableSectionProps {\n    bscScanAddress?: string\n    infoAddress?: string\n    removed?: boolean\n    totalValueFormatted?: string\n    lpLabel?: string\n    addLiquidityUrl?: string\n    fees?: FeesProps\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`;\n\nconst LinksWrapper = styled.div`\n  margin-top: 1rem;\n`\n\nconst StyledLinkExternal = styled( LinkExternal )`\n  font-weight: 400;\n`;\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ( {\n                                                               bscScanAddress,\n                                                               infoAddress,\n                                                               removed,\n                                                               totalValueFormatted,\n                                                               lpLabel,\n                                                               addLiquidityUrl,\n                                                               fees,\n                                                           } ) => {\n    const { t } = useTranslation();\n\n    return (\n        <Wrapper>\n            <Flex justifyContent=\"space-between\">\n                <Text small>{ t( 'Total Liquidity' ) }:</Text>\n                { totalValueFormatted ? <Text small>{ totalValueFormatted }</Text> : <Skeleton width={ 75 } height={ 25 }/> }\n            </Flex>\n            <Divider/>\n            <FeesCard fees={ fees }/>\n            <Divider/>\n            <LinksWrapper>\n                { !removed && (\n                    <Flex mb=\"2px\" justifyContent=\"flex-end\">\n                        <StyledLinkExternal href={ addLiquidityUrl } small>\n                            { t( 'Get %symbol%', { symbol: lpLabel } ) }\n                        </StyledLinkExternal>\n                    </Flex>\n                ) }\n\n                <Flex mb=\"2px\" justifyContent=\"flex-end\">\n                    <StyledLinkExternal href={ bscScanAddress } small>\n                        { t( 'View Contract' ) }\n                    </StyledLinkExternal>\n                </Flex>\n\n                <Flex mb=\"2px\" justifyContent=\"flex-end\">\n                    <StyledLinkExternal href={ infoAddress } small>\n                        { t( 'See Pair Info' ) }\n                    </StyledLinkExternal>\n                </Flex>\n            </LinksWrapper>\n\n        </Wrapper>\n    );\n};\n\nexport default DetailsSection;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Skeleton, Tag } from 'uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled( Flex )`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled( Tag )`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ( { lpLabel, multiplier, isCommunityFarm, token, quoteToken } ) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      { token.address === quoteToken.address ?\n        <TokenImage height={ 64 } width={ 64 } token={ token } /> :\n        <TokenPairImage variant=\"inverted\" primaryToken={ token } secondaryToken={ quoteToken } width={ 64 } height={ 64 } />\n      }\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{ lpLabel.split( ' ' )[0] }</Heading>\n        <Flex justifyContent=\"center\">\n          { isCommunityFarm ? <CommunityTag/> : <CoreTag/> }\n          { multiplier ? (\n            <MultiplierTag variant=\"secondary\">{ multiplier }</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={ 42 } height={ 28 }/>\n          ) }\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ( { size = 'md' } ) => {\n  const { spacing } = useContext( ThemeContext )\n\n  let s: number\n  switch ( size ) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={ s }/>\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${ ( props ) => props.size }px;\n  width: ${ ( props ) => props.size }px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ( { children } ) => {\n  const l = React.Children.toArray( children ).length\n  return (\n    <StyledModalActions>\n      { React.Children.map( children, ( child, i ) => (\n        <>\n          <StyledModalAction>{ child }</StyledModalAction>\n          { i < l - 1 && <Spacer/> }\n        </>\n      ) ) }\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${ ( props ) => props.theme.colors.primaryDark }00;\n  display: flex;\n  margin: 0;\n  padding: ${ ( props ) => props.theme.spacing[4] }px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps, Link, Text } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: ( e: React.FormEvent<HTMLInputElement> ) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ( { isWarning = false, theme } ) => {\n  if ( isWarning ) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${ ( { theme } ) => theme.colors.input };\n  border-radius: 16px;\n  box-shadow: ${ getBoxShadow };\n  color: ${ ( { theme } ) => theme.colors.text };\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled( Input )`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${ ( { theme } ) => theme.mediaQueries.xs } {\n    width: 80px;\n  }\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled( Text )`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ( {\n                                                  max,\n                                                  symbol,\n                                                  onChange,\n                                                  onSelectMax,\n                                                  value,\n                                                  addLiquidityUrl,\n                                                  inputTitle,\n                                                  decimals = 18,\n                                                } ) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = ( balance: string ) => {\n    if ( isBalanceZero ) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits( balance, decimals )\n    return formatBigNumber( balanceUnits, decimals, decimals )\n  }\n\n  return (\n    <div style={ { position: 'relative' } }>\n      <StyledTokenInput isWarning={ isBalanceZero }>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{ inputTitle }</Text>\n          <Text fontSize=\"14px\">{ t( 'Balance: %balance%', { balance: displayBalance( max ) } ) }</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={ `^[0-9]*[.,]?[0-9]{0,${ decimals }}$` }\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={ onChange }\n            placeholder=\"0\"\n            value={ value }\n          />\n          <Button scale=\"sm\" onClick={ onSelectMax } mr=\"8px\">\n            { t( 'Max' ) }\n          </Button>\n          <Text fontSize=\"16px\">{ symbol }</Text>\n        </Flex>\n      </StyledTokenInput>\n      { isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          { t( 'No tokens to stake' ) }:{ ' ' }\n          <Link fontSize=\"14px\" bold={ false } href={ addLiquidityUrl } external color=\"failure\">\n            { t( 'Get %symbol%', { symbol } ) }\n          </Link>\n        </StyledErrorMessage>\n      ) }\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, CalculateIcon, Flex, IconButton, LinkExternal, Modal, Text } from 'uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled( Flex )`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled( Text )`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: ( amount: string ) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ( {\n                                                      max,\n                                                      stakedBalance,\n                                                      onConfirm,\n                                                      onDismiss,\n                                                      tokenName = '',\n                                                      multiplier,\n                                                      displayApr,\n                                                      lpPrice,\n                                                      lpLabel,\n                                                      apr,\n                                                      addLiquidityUrl,\n                                                      cakePrice,\n                                                    } ) => {\n  const [ val, setVal ] = useState( '' )\n  const { toastSuccess, toastError } = useToast()\n  const [ pendingTx, setPendingTx ] = useState( false )\n  const [ showRoiCalculator, setShowRoiCalculator ] = useState( false )\n  const { t } = useTranslation()\n  const fullBalance = useMemo( () => {\n    return getFullDisplayBalance( max )\n  }, [ max ] )\n\n  const lpTokensToStake = new BigNumber( val )\n  const fullBalanceNumber = new BigNumber( fullBalance )\n\n  const usdToStake = lpTokensToStake.times( lpPrice )\n\n  const interestBreakdown = getInterestBreakdown( {\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  } )\n\n  const annualRoi = cakePrice.times( interestBreakdown[3] )\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt( 10000 ) ? 0 : 2,\n    annualRoi.gt( 10000 ) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    ( e: React.FormEvent<HTMLInputElement> ) => {\n      if ( e.currentTarget.validity.valid ) {\n        setVal( e.currentTarget.value.replace( /,/g, '.' ) )\n      }\n    },\n    [ setVal ],\n  )\n\n  const handleSelectMax = useCallback( () => {\n    setVal( fullBalance )\n  }, [ fullBalance, setVal ] )\n\n  if ( showRoiCalculator ) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={ t( 'Get %symbol%', { symbol: lpLabel } ) }\n        stakingTokenBalance={ stakedBalance.plus( max ) }\n        stakingTokenSymbol={ tokenName }\n        stakingTokenPrice={ lpPrice.toNumber() }\n        earningTokenPrice={ cakePrice.toNumber() }\n        apr={ apr }\n        multiplier={ multiplier }\n        displayApr={ displayApr }\n        linkHref={ addLiquidityUrl }\n        isFarm\n        initialValue={ val }\n        onBack={ () => setShowRoiCalculator( false ) }\n      />\n    )\n  }\n\n  return (\n    <Modal title={ t( 'Stake LP tokens' ) } onDismiss={ onDismiss }>\n      <ModalInput\n        value={ val }\n        onSelectMax={ handleSelectMax }\n        onChange={ handleChange }\n        max={ fullBalance }\n        symbol={ tokenName }\n        addLiquidityUrl={ addLiquidityUrl }\n        inputTitle={ t( 'Stake' ) }\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          { t( 'Annual ROI at current rates' ) }:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={ () => setShowRoiCalculator( true ) }>\n          <AnnualRoiDisplay>${ formattedAnnualRoi }</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\"/>\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={ onDismiss } width=\"100%\" disabled={ pendingTx }>\n          { t( 'Cancel' ) }\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq( 0 ) || lpTokensToStake.gt( fullBalanceNumber )\n          }\n          onClick={ async () => {\n            setPendingTx( true )\n            try {\n              await onConfirm( val )\n              toastSuccess( t( 'Staked!' ), t( 'Your funds have been staked in the farm' ) )\n              onDismiss()\n            } catch ( e ) {\n              toastError(\n                t( 'Error' ),\n                t( 'Please try again. Confirm the transaction and make sure you are paying enough gas!' ),\n              )\n              console.error( e )\n            } finally {\n              setPendingTx( false )\n            }\n          } }\n        >\n          { pendingTx ? t( 'Confirming' ) : t( 'Confirm' ) }\n        </Button>\n      </ModalActions>\n      <LinkExternal href={ addLiquidityUrl } style={ { alignSelf: 'center' } }>\n        { t( 'Get %symbol%', { symbol: tokenName } ) }\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: ( amount: string ) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ( { onConfirm, onDismiss, max, tokenName = '' } ) => {\n  const [ val, setVal ] = useState( '' )\n  const { toastSuccess, toastError } = useToast()\n  const [ pendingTx, setPendingTx ] = useState( false )\n  const { t } = useTranslation()\n  const fullBalance = useMemo( () => {\n    return getFullDisplayBalance( max )\n  }, [ max ] )\n\n  const valNumber = new BigNumber( val )\n  const fullBalanceNumber = new BigNumber( fullBalance )\n\n  const handleChange = useCallback(\n    ( e: React.FormEvent<HTMLInputElement> ) => {\n      if ( e.currentTarget.validity.valid ) {\n        setVal( e.currentTarget.value.replace( /,/g, '.' ) )\n      }\n    },\n    [ setVal ],\n  )\n\n  const handleSelectMax = useCallback( () => {\n    setVal( fullBalance )\n  }, [ fullBalance, setVal ] )\n\n  return (\n    <Modal title={ t( 'Unstake LP tokens' ) } onDismiss={ onDismiss }>\n      <ModalInput\n        onSelectMax={ handleSelectMax }\n        onChange={ handleChange }\n        value={ val }\n        max={ fullBalance }\n        symbol={ tokenName }\n        inputTitle={ t( 'Unstake' ) }\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={ onDismiss } width=\"100%\" disabled={ pendingTx }>\n          { t( 'Cancel' ) }\n        </Button>\n        <Button\n          disabled={ pendingTx || !valNumber.isFinite() || valNumber.eq( 0 ) || valNumber.gt( fullBalanceNumber ) }\n          onClick={ async () => {\n            setPendingTx( true )\n            try {\n              await onConfirm( val )\n              toastSuccess( t( 'Unstaked!' ), t( 'Your earnings have also been harvested to your wallet' ) )\n              onDismiss()\n            } catch ( e ) {\n              toastError(\n                t( 'Error' ),\n                t( 'Please try again. Confirm the transaction and make sure you are paying enough gas!' ),\n              )\n              console.error( e )\n            } finally {\n              setPendingTx( false )\n            }\n          } }\n          width=\"100%\"\n        >\n          { pendingTx ? t( 'Confirming' ) : t( 'Confirm' ) }\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = ( pid: number ) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async ( amount: string ) => {\n      await unstakeFarm( masterChefContract, pid, amount )\n    },\n    [ masterChefContract, pid ],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = ( pid: number ) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async ( amount: string ) => {\n      const txHash = await stakeFarm( masterChefContract, pid, amount )\n      console.info( txHash )\n    },\n    [ masterChefContract, pid ],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { AddIcon, Button, Flex, Heading, IconButton, MinusIcon, useModal } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ( {\n                                                        stakedBalance,\n                                                        tokenBalance,\n                                                        tokenName,\n                                                        pid,\n                                                        multiplier,\n                                                        apr,\n                                                        displayApr,\n                                                        addLiquidityUrl,\n                                                        cakePrice,\n                                                        lpLabel,\n                                                      } ) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms( pid )\n  const { onUnstake } = useUnstakeFarms( pid )\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice( tokenName )\n\n  const handleStake = async ( amount: string ) => {\n    await onStake( amount )\n    dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n  }\n\n  const handleUnstake = async ( amount: string ) => {\n    await onUnstake( amount )\n    dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n  }\n\n  const displayBalance = useCallback( () => {\n    const stakedBalanceBigNumber = getBalanceAmount( stakedBalance )\n    if ( stakedBalanceBigNumber.gt( 0 ) && stakedBalanceBigNumber.lt( 0.0000001 ) ) {\n      return '<0.0000001'\n    }\n    if ( stakedBalanceBigNumber.gt( 0 ) ) {\n      return stakedBalanceBigNumber.toFixed( 8, BigNumber.ROUND_DOWN )\n    }\n    return stakedBalanceBigNumber.toFixed( 3, BigNumber.ROUND_DOWN )\n  }, [ stakedBalance ] )\n\n  const [ onPresentDeposit ] = useModal(\n    <DepositModal\n      max={ tokenBalance }\n      stakedBalance={ stakedBalance }\n      onConfirm={ handleStake }\n      tokenName={ tokenName }\n      multiplier={ multiplier }\n      lpPrice={ lpPrice }\n      lpLabel={ lpLabel }\n      apr={ apr }\n      displayApr={ displayApr }\n      addLiquidityUrl={ addLiquidityUrl }\n      cakePrice={ cakePrice }\n    />,\n  )\n  const [ onPresentWithdraw ] = useModal(\n    <WithdrawModal max={ stakedBalance } onConfirm={ handleUnstake } tokenName={ tokenName }/>,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq( 0 ) ? (\n      <Button\n        onClick={ onPresentDeposit }\n        disabled={ [ 'history', 'archived' ].some( ( item ) => location.pathname.includes( item ) ) }\n      >\n        { t( 'Stake LP' ) }\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={ onPresentWithdraw } mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\"/>\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={ onPresentDeposit }\n          disabled={ [ 'history', 'archived' ].some( ( item ) => location.pathname.includes( item ) ) }\n        >\n          <AddIcon color=\"primary\" width=\"14px\"/>\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={ stakedBalance.eq( 0 ) ? 'textDisabled' : 'text' }>{ displayBalance() }</Heading>\n        { stakedBalance.gt( 0 ) && lpPrice.gt( 0 ) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={ 2 }\n            value={ getBalanceNumber( lpPrice.times( stakedBalance ) ) }\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        ) }\n      </Flex>\n      { renderStakingButtons() }\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = ( farmPid: number ) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback( async () => {\n    await harvestFarm( masterChefContract, farmPid )\n  }, [ farmPid, masterChefContract ] )\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ( { earnings, pid } ) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [ pendingTx, setPendingTx ] = useState( false )\n  const { onReward } = useHarvestFarm( pid )\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount( earnings ) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed( 3, BigNumber.ROUND_DOWN )\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy( cakePrice ).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={ rawEarningsBalance.eq( 0 ) ? 'textDisabled' : 'text' }>{ displayBalance }</Heading>\n        { earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={ 2 } value={ earningsBusd } unit=\" USD\" prefix=\"~\"/>\n        ) }\n      </Flex>\n      <Button\n        disabled={ rawEarningsBalance.eq( 0 ) || pendingTx }\n        onClick={ async () => {\n          setPendingTx( true )\n          try {\n            await onReward()\n            toastSuccess(\n              `${ t( 'Harvested' ) }!`,\n              t( 'Your %symbol% earnings have been sent to your wallet!', { symbol: 'VANI' } ),\n            )\n          } catch ( e ) {\n            toastError(\n              t( 'Error' ),\n              t( 'Please try again. Confirm the transaction and make sure you are paying enough gas!' ),\n            )\n            console.error( e )\n          } finally {\n            setPendingTx( false )\n          }\n          dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n        } }\n      >\n        { pendingTx ? t( 'Harvesting' ) : t( 'Harvest' ) }\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { Contract, ethers } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = ( lpContract: Contract ) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback( async () => {\n    const tx = await callWithGasPrice( lpContract, 'approve', [ masterChefContract.address, ethers.constants.MaxUint256 ] )\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [ lpContract, masterChefContract, callWithGasPrice ] )\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from 'uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ( { farm, account, addLiquidityUrl, cakePrice, lpLabel } ) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [ requestedApproval, setRequestedApproval ] = useState( false )\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress( lpAddresses )\n  const isApproved = account && allowance && allowance.isGreaterThan( 0 )\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20( lpAddress )\n\n  const { onApprove } = useApproveFarm( lpContract )\n\n  const handleApprove = useCallback( async () => {\n    try {\n      setRequestedApproval( true )\n      await onApprove()\n      dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n    } catch ( e ) {\n      toastError( t( 'Error' ), t( 'Please try again. Confirm the transaction and make sure you are paying enough gas!' ) )\n      console.error( e )\n    } finally {\n      setRequestedApproval( false )\n    }\n  }, [ onApprove, dispatch, account, pid, t, toastError ] )\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={ stakedBalance }\n        tokenBalance={ tokenBalance }\n        tokenName={ farm.lpSymbol }\n        pid={ pid }\n        apr={ farm.apr }\n        lpLabel={ lpLabel }\n        cakePrice={ cakePrice }\n        addLiquidityUrl={ addLiquidityUrl }\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={ requestedApproval } onClick={ handleApprove }>\n        { t( 'Enable Contract' ) }\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          VANI\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          { t( 'Earned' ) }\n        </Text>\n      </Flex>\n      <HarvestAction earnings={ earnings } pid={ pid }/>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          { farm.lpSymbol }\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          { t( 'Staked' ) }\n        </Text>\n      </Flex>\n      { !account ? <ConnectWalletButton mt=\"8px\" width=\"100%\"/> : renderApprovalOrStakeButton() }\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, Flex, IconButton, useModal } from 'uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled( Flex )`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ( {\n                                                variant,\n                                                pid,\n                                                lpLabel,\n                                                lpSymbol,\n                                                cakePrice,\n                                                apr,\n                                                multiplier,\n                                                displayApr,\n                                                addLiquidityUrl,\n                                              } ) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice( lpSymbol )\n  const { tokenBalance, stakedBalance } = useFarmUser( pid )\n  const [ onPresentApyModal ] = useModal(\n    <RoiCalculatorModal\n      linkLabel={ t( 'Get %symbol%', { symbol: lpLabel } ) }\n      stakingTokenBalance={ stakedBalance.plus( tokenBalance ) }\n      stakingTokenSymbol={ lpSymbol }\n      stakingTokenPrice={ lpPrice.toNumber() }\n      earningTokenPrice={ cakePrice.toNumber() }\n      apr={ apr }\n      multiplier={ multiplier }\n      displayApr={ displayApr }\n      linkHref={ addLiquidityUrl }\n      isFarm\n    />,\n  )\n\n  const handleClickButton = ( event ): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={ handleClickButton }>\n      { displayApr }%\n      { variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\"/>\n        </IconButton>\n      ) }\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Skeleton, Text } from 'uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL, PCS_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled( Card )`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled( Flex )`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${ ( { theme } ) => theme.colors.cardBorder };\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ( { farm, displayApr, removed, cakePrice, account } ) => {\n  const { t } = useTranslation()\n  const [ showExpandableSection, setShowExpandableSection ] = useState( false )\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt( 0 )\n      ? `$${ farm.liquidity.toNumber().toLocaleString( undefined, { maximumFractionDigits: 0 } ) }`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase()\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t( 'VANI + Fees' )\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts( {\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  } )\n  const addLiquidityUrl = `${ BASE_ADD_LIQUIDITY_URL }/${ liquidityUrlPathParts }`\n  const lpAddress = getAddress( farm.lpAddresses )\n  const isPromotedFarm = farm.token.symbol === 'VANI'\n\n  return (\n    <StyledCard isActive={ isPromotedFarm }>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={ lpLabel }\n          multiplier={ farm.multiplier }\n          isCommunityFarm={ farm.isCommunity }\n          token={ farm.token }\n          quoteToken={ farm.quoteToken }\n        />\n        { !removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{ t( 'APR' ) }:</Text>\n            <Text bold style={ { display: 'flex', alignItems: 'center' } }>\n              { farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={ farm.pid }\n                  lpSymbol={ farm.lpSymbol }\n                  multiplier={ farm.multiplier }\n                  lpLabel={ lpLabel }\n                  addLiquidityUrl={ addLiquidityUrl }\n                  cakePrice={ cakePrice }\n                  apr={ farm.apr }\n                  displayApr={ displayApr }\n                />\n              ) : (\n                <Skeleton height={ 24 } width={ 80 }/>\n              ) }\n            </Text>\n          </Flex>\n        ) }\n        <Flex justifyContent=\"space-between\">\n          <Text>{ t( 'Earn' ) }:</Text>\n          <Text bold>{ earnLabel }</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={ farm }\n          lpLabel={ lpLabel }\n          account={ account }\n          cakePrice={ cakePrice }\n          addLiquidityUrl={ addLiquidityUrl }\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={ () => setShowExpandableSection( !showExpandableSection ) }\n          expanded={ showExpandableSection }\n        />\n        { showExpandableSection && (\n          <DetailsSection\n            removed={ removed }\n            bscScanAddress={ getBscScanLink( lpAddress, 'address' ) }\n            infoAddress={ `${ PCS_URL }/info/pool/${ lpAddress }` }\n            totalValueFormatted={ totalValueFormatted }\n            lpLabel={ lpLabel }\n            addLiquidityUrl={ addLiquidityUrl }\n            fees={ farm.fees }\n          />\n        ) }\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from 'uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${ ( { theme } ) => theme.colors.text };\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${ ( { theme } ) => theme.colors.textSubtle };\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ( {\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n} ) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts( { quoteTokenAddress, tokenAddress } )\n  const addLiquidityUrl = `${ BASE_ADD_LIQUIDITY_URL }/${ liquidityUrlPathParts }`\n\n  return originalValue !== 0 ? (\n    <Container>\n      { originalValue ? (\n        <ApyButton\n          variant={ hideButton ? 'text' : 'text-and-button' }\n          pid={ pid }\n          lpSymbol={ lpSymbol }\n          lpLabel={ lpLabel }\n          multiplier={ multiplier }\n          cakePrice={ cakePrice }\n          apr={ originalValue }\n          displayApr={ value }\n          addLiquidityUrl={ addLiquidityUrl }\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={ 60 }/>\n        </AprWrapper>\n      ) }\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{ originalValue }%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ( { token, quoteToken, label, pid } ) => {\n  const { stakedBalance } = useFarmUser( pid )\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber( stakedBalance )\n\n  const handleRenderFarming = (): JSX.Element => {\n    if ( rawStakedBalance ) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          { t( 'Farming' ) }\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        { token.address === quoteToken.address ?\n          <TokenImage height={ 64 } width={ 64 } token={ token } /> :\n          <TokenPairImage variant=\"inverted\" primaryToken={ token } secondaryToken={ quoteToken } width={ 40 } height={ 40 } />\n        }\n      </TokenWrapper>\n      <div>\n        { handleRenderFarming() }\n        <Text bold>{ label }</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${ ( { earned, theme } ) => (earned ? theme.colors.text : theme.colors.textDisabled) };\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ( { earnings, userDataReady } ) => {\n  if ( userDataReady ) {\n    return <Amount earned={ earnings }>{ earnings.toLocaleString() }</Amount>\n  }\n  return (\n    <Amount earned={ 0 }>\n      <Skeleton width={ 60 }/>\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${ ( { theme } ) => theme.colors.primary };\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled( ChevronDownIcon )<{ toggled: boolean }>`\n  transform: ${ ( { toggled } ) => (toggled ? 'rotate(180deg)' : 'rotate(0)') };\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ( { actionPanelToggled } ) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      { !isDesktop && t( 'Details' ) }\n      <ArrowIcon color=\"primary\" toggled={ actionPanelToggled }/>\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, Text, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${ ( { theme } ) => theme.colors.text };\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${ ( { theme } ) => theme.mediaQueries.lg } {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ( { multiplier } ) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={ 30 }/>\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        { t(\n          'The Multiplier represents the proportion of VANI rewards each farm receives, as a proportion of the VANI produced each block.',\n        ) }\n      </Text>\n      <Text my=\"24px\">\n        { t( 'For example, if a 1x farm received 1 VANI per block, a 40x farm would receive 40 VANI per block.' ) }\n      </Text>\n      <Text>{ t( 'This amount is already included in all APR calculations for the farm.' ) }</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip( tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [ 20, 10 ],\n  } )\n\n  return (\n    <Container>\n      <MultiplierWrapper>{ displayMultiplier }</MultiplierWrapper>\n      <ReferenceElement ref={ targetRef }>\n        <HelpIcon color=\"textSubtle\"/>\n      </ReferenceElement>\n      { tooltipVisible && tooltip }\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, Text, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${ ( { theme } ) => theme.mediaQueries.lg } {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ( { liquidity } ) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt( 0 ) ? (\n      `$${ Number( liquidity ).toLocaleString( undefined, { maximumFractionDigits: 0 } ) }`\n    ) : (\n      <Skeleton width={ 60 }/>\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t( 'Total value of the funds in this farm’s liquidity pool' ),\n    { placement: 'top-end', tooltipOffset: [ 20, 10 ] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{ displayLiquidity }</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={ targetRef }>\n        <HelpIcon color=\"textSubtle\"/>\n      </ReferenceElement>\n      { tooltipVisible && tooltip }\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${ ( { theme } ) => theme.colors.input };\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${ ( { theme } ) => theme.mediaQueries.xl } {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from 'uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ( { pid, userData, userDataReady } ) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber( userData.earnings )\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={ 60 }/>\n\n  // If user didn't connect wallet default balance will be 0\n  if ( !earningsBigNumber.isZero() ) {\n    earnings = getBalanceAmount( earningsBigNumber )\n    earningsBusd = earnings.multipliedBy( cakePrice ).toNumber()\n    displayBalance = earnings.toFixed( 3, BigNumber.ROUND_DOWN )\n  }\n\n  const [ pendingTx, setPendingTx ] = useState( false )\n  const { onReward } = useHarvestFarm( pid )\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          VANI\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          { t( 'Earned' ) }\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{ displayBalance }</Heading>\n          { earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={ 2 } value={ earningsBusd } unit=\" USD\" prefix=\"~\"/>\n          ) }\n        </div>\n        <Button\n          disabled={ earnings.eq( 0 ) || pendingTx || !userDataReady }\n          onClick={ async () => {\n            setPendingTx( true )\n            try {\n              await onReward()\n              toastSuccess(\n                `${ t( 'Harvested' ) }!`,\n                t( 'Your %symbol% earnings have been sent to your wallet!', { symbol: 'VANI' } ),\n              )\n            } catch ( e ) {\n              toastError(\n                t( 'Error' ),\n                t( 'Please try again. Confirm the transaction and make sure you are paying enough gas!' ),\n              )\n              console.error( e )\n            } finally {\n              setPendingTx( false )\n            }\n            dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n          } }\n          ml=\"4px\"\n        >\n          { pendingTx ? t( 'Harvesting' ) : t( 'Harvest' ) }\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { AddIcon, Button, Heading, IconButton, MinusIcon, Skeleton, Text, useModal } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ( {\n                                                                pid,\n                                                                apr,\n                                                                multiplier,\n                                                                lpSymbol,\n                                                                lpLabel,\n                                                                lpAddresses,\n                                                                quoteToken,\n                                                                token,\n                                                                userDataReady,\n                                                                displayApr,\n                                                              } ) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [ requestedApproval, setRequestedApproval ] = useState( false )\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser( pid )\n  const { onStake } = useStakeFarms( pid )\n  const { onUnstake } = useUnstakeFarms( pid )\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice( lpSymbol )\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan( 0 )\n\n  const lpAddress = getAddress( lpAddresses )\n  const liquidityUrlPathParts = getLiquidityUrlPathParts( {\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  } )\n  const addLiquidityUrl = `${ BASE_ADD_LIQUIDITY_URL }/${ liquidityUrlPathParts }`\n\n  const handleStake = async ( amount: string ) => {\n    await onStake( amount )\n    dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n  }\n\n  const handleUnstake = async ( amount: string ) => {\n    await onUnstake( amount )\n    dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n  }\n\n  const displayBalance = useCallback( () => {\n    const stakedBalanceBigNumber = getBalanceAmount( stakedBalance )\n    if ( stakedBalanceBigNumber.gt( 0 ) && stakedBalanceBigNumber.lt( 0.0000001 ) ) {\n      return stakedBalanceBigNumber.toFixed( 10, BigNumber.ROUND_DOWN )\n    }\n    if ( stakedBalanceBigNumber.gt( 0 ) && stakedBalanceBigNumber.lt( 0.0001 ) ) {\n      return getFullDisplayBalance( stakedBalance ).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed( 3, BigNumber.ROUND_DOWN )\n  }, [ stakedBalance ] )\n\n  const [ onPresentDeposit ] = useModal(\n    <DepositModal\n      max={ tokenBalance }\n      lpPrice={ lpPrice }\n      lpLabel={ lpLabel }\n      apr={ apr }\n      displayApr={ displayApr }\n      stakedBalance={ stakedBalance }\n      onConfirm={ handleStake }\n      tokenName={ lpSymbol }\n      multiplier={ multiplier }\n      addLiquidityUrl={ addLiquidityUrl }\n      cakePrice={ cakePrice }\n    />,\n  )\n  const [ onPresentWithdraw ] = useModal(\n    <WithdrawModal max={ stakedBalance } onConfirm={ handleUnstake } tokenName={ lpSymbol }/>,\n  )\n  const lpContract = useERC20( lpAddress )\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm( lpContract )\n\n  const handleApprove = useCallback( async () => {\n    try {\n      setRequestedApproval( true )\n      await onApprove()\n      dispatch( fetchFarmUserDataAsync( { account, pids: [ pid ] } ) )\n    } catch ( e ) {\n      toastError( t( 'Error' ), t( 'Please try again. Confirm the transaction and make sure you are paying enough gas!' ) )\n      console.error( e )\n    } finally {\n      setRequestedApproval( false )\n    }\n  }, [ onApprove, dispatch, account, pid, t, toastError ] )\n\n  if ( !account ) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            { t( 'Start Farming' ) }\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\"/>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if ( isApproved ) {\n    if ( stakedBalance.gt( 0 ) ) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              { lpSymbol }\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              { t( 'Staked' ) }\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{ displayBalance() }</Heading>\n              { stakedBalance.gt( 0 ) && lpPrice.gt( 0 ) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={ 2 }\n                  value={ getBalanceNumber( lpPrice.times( stakedBalance ) ) }\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              ) }\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={ onPresentWithdraw } mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\"/>\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={ onPresentDeposit }\n                disabled={ [ 'history', 'archived' ].some( ( item ) => location.pathname.includes( item ) ) }\n              >\n                <AddIcon color=\"primary\" width=\"14px\"/>\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            { t( 'Stake' ) }\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            { lpSymbol }\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={ onPresentDeposit }\n            variant=\"secondary\"\n            disabled={ [ 'history', 'archived' ].some( ( item ) => location.pathname.includes( item ) ) }\n          >\n            { t( 'Stake LP' ) }\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if ( !userDataReady ) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            { t( 'Start Farming' ) }\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={ 180 } marginBottom={ 28 } marginTop={ 14 }/>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          { t( 'Enable Farm' ) }\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={ requestedApproval } onClick={ handleApprove } variant=\"secondary\">\n          { t( 'Enable' ) }\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport { Flex, Text } from 'uikit'\nimport styled from 'styled-components'\nimport { FeesProps } from 'state/types'\n\ninterface FeesCellProps {\n  fees: FeesProps\n}\n\nexport const FeesContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${ ( { theme } ) => theme.colors.input };\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${ ( { theme } ) => theme.mediaQueries.xl } {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nconst FeesCell: React.FC<FeesCellProps> = ( { fees } ) => (\n  <FeesContainer>\n    <Flex justifyContent=\"space-between\">\n      <Text>Harvest Fee:</Text>\n      {\n        fees?.harvestFee ?\n          <Text bold>{ `${ fees.harvestFee / 100 }%` }</Text> :\n          <Text>-</Text>\n      }\n    </Flex>\n    <Flex justifyContent=\"space-between\">\n      <Text>Deposit Fee:</Text>\n      {\n        fees?.depositFee ?\n          <Text bold>{ `${ fees.depositFee / 100 }%` }</Text> :\n          <Text>-</Text>\n      }\n    </Flex>\n    <Flex justifyContent=\"space-between\">\n      <Text>Withdraw Fee:</Text>\n      {\n        fees?.taxWithdraw ?\n          <Text bold>{ `${ fees.taxWithdraw / 100 }%` }</Text> :\n          <Text>-</Text>\n      }\n    </Flex>\n  </FeesContainer>\n)\n\nexport default FeesCell","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport { LinkExternal, Text } from 'uikit';\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard';\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts';\nimport { getAddress } from 'utils/addressHelpers';\nimport { getBscScanLink } from 'utils';\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags';\nimport { BASE_ADD_LIQUIDITY_URL, PCS_URL } from 'config';\nimport HarvestAction from './HarvestAction';\nimport StakedAction from './StakedAction';\nimport Apr, { AprProps } from '../Apr';\nimport Multiplier, { MultiplierProps } from '../Multiplier';\nimport Liquidity, { LiquidityProps } from '../Liquidity';\nimport FeesCell from '../FeesCell';\n\nexport interface ActionPanelProps {\n    apr: AprProps\n    multiplier: MultiplierProps\n    liquidity: LiquidityProps\n    details: FarmWithStakedValue\n    userDataReady: boolean\n    expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 800px;\n  }\n`;\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 800px;\n  }\n  to {\n    max-height: 0px;\n  }\n`;\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${ ( { expanded } ) =>\n    expanded\n        ? css`\n          ${ expandAnimation } 300ms linear forwards\n        `\n        : css`\n          ${ collapseAnimation } 300ms linear forwards\n        ` };\n  overflow: hidden;\n  background: ${ ( { theme } ) => theme.colors.background };\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${ ( { theme } ) => theme.mediaQueries.lg } {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`;\n\nconst StyledLinkExternal = styled( LinkExternal )`\n  font-weight: 400;\n`;\n\nconst StakeContainer = styled.div`\n  color: ${ ( { theme } ) => theme.colors.text };\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    justify-content: flex-start;\n  }\n`;\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 2;\n    flex-basis: 0;\n  }\n`;\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`;\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${ ( { theme } ) => theme.mediaQueries.lg } {\n    display: none;\n  }\n`;\n\nconst FeesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`;\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`;\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ( {\n                                                                     details,\n                                                                     apr,\n                                                                     multiplier,\n                                                                     liquidity,\n                                                                     userDataReady,\n                                                                     expanded,\n                                                                 } ) => {\n    const farm = details;\n\n    const { t } = useTranslation();\n    const isActive = farm.multiplier !== '0X';\n    const { quoteToken, token, dual } = farm;\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase();\n    const liquidityUrlPathParts = getLiquidityUrlPathParts( {\n        quoteTokenAddress: quoteToken.address,\n        tokenAddress: token.address,\n    } );\n    const lpAddress = getAddress( farm.lpAddresses );\n    const bsc = getBscScanLink( lpAddress, 'address' );\n    const info = `${ PCS_URL }/info/pool/${ lpAddress }`;\n\n    return (\n        <Container expanded={ expanded }>\n            <InfoContainer>\n                { isActive && (\n                    <StakeContainer>\n                        <StyledLinkExternal href={ `${ BASE_ADD_LIQUIDITY_URL }/${ liquidityUrlPathParts }` }>\n                            { t( 'Get %symbol%', { symbol: lpLabel } ) }\n                        </StyledLinkExternal>\n                    </StakeContainer>\n                ) }\n                <StyledLinkExternal href={ bsc }>{ t( 'View Contract' ) }</StyledLinkExternal>\n                <StyledLinkExternal href={ info }>{ t( 'See Pair Info' ) }</StyledLinkExternal>\n                <TagsContainer>\n                    { farm.isCommunity ? <CommunityTag/> : <CoreTag/> }\n                    { dual ? <DualTag/> : null }\n                </TagsContainer>\n            </InfoContainer>\n            <ValueContainer>\n                <ValueWrapper>\n                    <Text>{ t( 'APR' ) }</Text>\n                    <Apr { ...apr } />\n                </ValueWrapper>\n                <ValueWrapper>\n                    <Text>{ t( 'Multiplier' ) }</Text>\n                    <Multiplier { ...multiplier } />\n                </ValueWrapper>\n                <ValueWrapper>\n                    <Text>{ t( 'Liquidity' ) }</Text>\n                    <Liquidity { ...liquidity } />\n                </ValueWrapper>\n            </ValueContainer>\n            <ActionContainer>\n                <HarvestAction { ...farm } userDataReady={ userDataReady }/>\n                <StakedAction { ...farm } userDataReady={ userDataReady } lpLabel={ lpLabel } displayApr={ apr.value }/>\n            </ActionContainer>\n            <FeesContainer>\n                <FeesCell fees={ farm.fees }/>\n            </FeesContainer>\n        </Container>\n    );\n};\n\nexport default ActionPanel;\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${ ( { theme } ) => theme.colors.textSubtle };\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ( { label = '', children } ) => {\n  return (\n    <div>\n      { label && <Label>{ label }</Label> }\n      <ContentContainer>{ children }</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: ( value: string ) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${ ( { theme } ) => theme.mediaQueries.xl } {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${ ( { theme } ) => theme.colors.cardBorder };\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = ( props ) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser( details.pid ).stakedBalance.toNumber()\n  const [ actionPanelExpanded, setActionPanelExpanded ] = useState( hasStakedAmount )\n  const shouldRenderChild = useDelayedUnmount( actionPanelExpanded, 300 )\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded( !actionPanelExpanded )\n  }\n\n  useEffect( () => {\n    setActionPanelExpanded( hasStakedAmount )\n  }, [ hasStakedAmount ] )\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map( ( column ) => column.name )\n\n  const handleRenderRow = () => {\n    if ( !isMobile ) {\n      return (\n        <StyledTr onClick={ toggleActionPanel }>\n          { Object.keys( props ).map( ( key ) => {\n            const columnIndex = columnNames.indexOf( key )\n            if ( columnIndex === -1 ) {\n              return null\n            }\n\n            switch ( key ) {\n              case 'details':\n                return (\n                  <td key={ key }>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={ actionPanelExpanded }/>\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={ key }>\n                    <CellInner>\n                      <CellLayout label={ t( 'APR' ) }>\n                        <Apr { ...props.apr } hideButton={ isSmallerScreen }/>\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={ key }>\n                    <CellInner>\n                      <CellLayout label={ t( tableSchema[columnIndex].label ) }>\n                        { React.createElement( cells[key], { ...props[key], userDataReady } ) }\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          } ) }\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={ toggleActionPanel }>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm { ...props.farm } />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={ t( 'Earned' ) }>\n                <Earned { ...props.earned } userDataReady={ userDataReady }/>\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={ t( 'APR' ) }>\n                <Apr { ...props.apr } hideButton/>\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={ actionPanelExpanded }/>\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      { handleRenderRow() }\n      { shouldRenderChild && (\n        <tr>\n          <td colSpan={ 6 }>\n            <ActionPanel { ...props } expanded={ actionPanelExpanded }/>\n          </td>\n        </tr>\n      ) }\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon, ColumnType, useTable } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${ ( { theme } ) => theme.card.dropShadow };\n  width: 100%;\n  background: ${ ( { theme } ) => theme.card.background };\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = ( props ) => {\n  const tableWrapperEl = useRef<HTMLDivElement>( null )\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable( columns, data, { sortable: true, sortColumn: 'farm' } )\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView( {\n      behavior: 'smooth',\n    } )\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={ tableWrapperEl }>\n          <StyledTable>\n            <TableBody>\n              { rows.map( ( row ) => {\n                return <Row { ...row.original } userDataReady={ userDataReady } key={ `table-row-${ row.id }` }/>\n              } ) }\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={ scrollToTop }>\n            { t( 'To Top' ) }\n            <ChevronUpIcon color=\"primary\"/>\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CardViewIcon, IconButton, ListViewIcon } from 'uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: ( mode: ViewMode ) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ( { viewMode, onToggle } ) => {\n  const handleToggle = ( mode: ViewMode ) => {\n    if ( viewMode !== mode ) {\n      onToggle( mode )\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={ () => handleToggle( ViewMode.CARD ) }>\n        <CardViewIcon color={ viewMode === ViewMode.CARD ? 'primary' : 'textDisabled' }/>\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={ () => handleToggle( ViewMode.TABLE ) }>\n        <ListViewIcon color={ viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled' }/>\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Heading, RowType, Text, Toggle } from 'uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${ Text } {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${ Text } {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n  flex-wrap: wrap;\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst SearchWrapper = styled(LabelWrapper)`\n  margin-top: 16px;\n  ${ ( { theme } ) => theme.mediaQueries.sm } {\n    margin-top: 0px;\n    margin-left: 16px;\n  }\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst FARM_TYPES = {\n  ALL: 0,\n  SINGLE_ASSETS: 1,\n  STABLE_LPS: 2,\n  STABLES: 3,\n}\n\nconst getDisplayApr = ( cakeRewardsApr?: number, lpRewardsApr?: number ) => {\n  if ( cakeRewardsApr && lpRewardsApr ) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString( 'en-US', { maximumFractionDigits: 2 } )\n  }\n  if ( cakeRewardsApr ) {\n    return cakeRewardsApr.toLocaleString( 'en-US', { maximumFractionDigits: 2 } )\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [ query, setQuery ] = useState( '' )\n  const [ viewMode, setViewMode ] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [ farmType, setFarmType ] = useState( FARM_TYPES.ALL )\n  const [ sortOption, setSortOption ] = useState( 'hot' )\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef( 0 )\n\n  const isActive = true\n\n  usePollFarmsWithUserData( false )\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [ stakedOnly, setStakedOnly ] = useUserFarmStakedOnly( isActive )\n\n  const activeFarms = farmsLP.filter( ( farm ) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid( farm.pid ) )\n  //! console.debug( { activeFarms } )\n\n  const stakedOnlyFarms = activeFarms.filter(\n    ( farm ) => farm.userData && new BigNumber( farm.userData.stakedBalance ).isGreaterThan( 0 ),\n  )\n\n  const farmsList = useCallback(\n    ( farmsToDisplay: DeserializedFarm[] ): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map( ( farm ) => {\n        if ( !farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd ) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber( farm.lpTotalInQuoteToken ).times( farm.quoteTokenPriceBusd )\n        const { cakeRewardsApr, lpRewardsApr } = getFarmApr( new BigNumber( farm.poolWeight ), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET] )\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      } )\n\n      if ( farmType ) {\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter( farm => {\n          if ( farmType === FARM_TYPES.SINGLE_ASSETS ) {\n            return farm.token.address === farm.quoteToken.address\n          }\n\n          const stableTokens = [ 'BUSD', 'USDT', 'USDC', 'DAI' ]\n\n          if ( farmType === FARM_TYPES.STABLE_LPS ) {\n            return (\n              farm.token.address !== farm.quoteToken.address &&\n              (stableTokens.includes( farm.token.symbol ) && stableTokens.includes( farm.quoteToken.symbol ))\n            )\n          }\n\n          if ( farmType === FARM_TYPES.STABLES ) {\n            return (\n              farm.token.address !== farm.quoteToken.address &&\n              (stableTokens.includes( farm.token.symbol ) || stableTokens.includes( farm.quoteToken.symbol ))\n            )\n          }\n\n          return true\n        } )\n      }\n\n      if ( query ) {\n        const lowercaseQuery = latinise( query.toLowerCase() )\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter( ( farm: FarmWithStakedValue ) => {\n          return latinise( farm.lpSymbol.toLowerCase() ).includes( lowercaseQuery )\n        } )\n      }\n      return farmsToDisplayWithAPR\n    },\n    [ cakePrice, farmType, query ],\n  )\n\n  const handleChangeQuery = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n    setQuery( event.target.value )\n  }\n\n  const [ numberOfFarmsVisible, setNumberOfFarmsVisible ] = useState( NUMBER_OF_FARMS_VISIBLE )\n\n  const chosenFarmsMemoized = useMemo( () => {\n    let chosenFarms = []\n\n    const sortFarms = ( farms: FarmWithStakedValue[] ): FarmWithStakedValue[] => {\n      switch ( sortOption ) {\n        case 'apr':\n          return orderBy( farms, ( farm: FarmWithStakedValue ) => farm.apr + farm.lpRewardsApr, 'desc' )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            ( farm: FarmWithStakedValue ) => (farm.multiplier ? Number( farm.multiplier.slice( 0, -1 ) ) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            ( farm: FarmWithStakedValue ) => (farm.userData ? Number( farm.userData.earnings ) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy( farms, ( farm: FarmWithStakedValue ) => Number( farm.liquidity ), 'desc' )\n        default:\n          return farms\n      }\n    }\n\n    if ( isActive ) {\n      chosenFarms = stakedOnly ? farmsList( stakedOnlyFarms ) : farmsList( activeFarms )\n    }\n\n    return sortFarms( chosenFarms ).slice( 0, numberOfFarmsVisible )\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    isActive,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ] )\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect( () => {\n    if ( isIntersecting ) {\n      setNumberOfFarmsVisible( ( farmsCurrentlyVisible ) => {\n        if ( farmsCurrentlyVisible <= chosenFarmsLength.current ) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      } )\n    }\n  }, [ isIntersecting ] )\n\n  const rowData = chosenFarmsMemoized.map( ( farm ) => {\n    //! console.debug('FarmRowData', farm);\n\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split( ' ' )[0].toUpperCase()\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr( farm.apr, farm.lpRewardsApr ),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber( new BigNumber( farm.userData.earnings ) ),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  } )\n\n  const renderContent = (): JSX.Element => {\n    if ( viewMode === ViewMode.TABLE && rowData.length ) {\n      const columns = DesktopColumnSchema.map( ( column ) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: ( a: RowType<RowProps>, b: RowType<RowProps> ) => {\n          switch ( column.name ) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if ( a.original.apr.value && b.original.apr.value ) {\n                return Number( a.original.apr.value ) - Number( b.original.apr.value )\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }) )\n\n      return <Table data={ rowData } columns={ columns } userDataReady={ userDataReady }/>\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={ `${ path }` }>\n          { chosenFarmsMemoized.map( ( farm ) => (\n            <FarmCard\n              key={ farm.pid }\n              farm={ farm }\n              displayApr={ getDisplayApr( farm.apr, farm.lpRewardsApr ) }\n              cakePrice={ cakePrice }\n              account={ account }\n              removed={ false }\n            />\n          ) ) }\n        </Route>\n        <Route exact path={ `${ path }/history` }>\n          { chosenFarmsMemoized.map( ( farm ) => (\n            <FarmCard\n              key={ farm.pid }\n              farm={ farm }\n              displayApr={ getDisplayApr( farm.apr, farm.lpRewardsApr ) }\n              cakePrice={ cakePrice }\n              account={ account }\n              removed\n            />\n          ) ) }\n        </Route>\n        <Route exact path={ `${ path }/archived` }>\n          { chosenFarmsMemoized.map( ( farm ) => (\n            <FarmCard\n              key={ farm.pid }\n              farm={ farm }\n              displayApr={ getDisplayApr( farm.apr, farm.lpRewardsApr ) }\n              cakePrice={ cakePrice }\n              account={ account }\n              removed\n            />\n          ) ) }\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = ( option: OptionProps ): void => {\n    setSortOption( option.value )\n  }\n\n  const handleFarmTypeChange = ( option: OptionProps ): void => {\n    setFarmType( option.value )\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          { t( 'Farms' ) }\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          { t( 'Stake LP tokens to earn.' ) }\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={ viewMode } onToggle={ ( mode: ViewMode ) => setViewMode( mode ) }/>\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={ stakedOnly }\n                onChange={ () => setStakedOnly( !stakedOnly ) }\n                scale=\"sm\"\n              />\n              <Text> { t( 'Staked only' ) }</Text>\n            </ToggleWrapper>\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{ t( 'Farm type' ) }</Text>\n              <Select\n                options={ [\n                  {\n                    label: t( 'All' ),\n                    value: FARM_TYPES.ALL,\n                  },\n                  {\n                    label: t( 'Single Assets' ),\n                    value: FARM_TYPES.SINGLE_ASSETS,\n                  },\n                  {\n                    label: t( 'Stable LPs' ),\n                    value: FARM_TYPES.STABLE_LPS,\n                  },\n                  {\n                    label: t( 'Stables' ),\n                    value: FARM_TYPES.STABLES,\n                  },\n                ] }\n                onOptionChange={ handleFarmTypeChange }\n              />\n            </LabelWrapper>\n            <LabelWrapper style={ { marginLeft: 16 } }>\n              <Text textTransform=\"uppercase\">{ t( 'Sort by' ) }</Text>\n              <Select\n                options={ [\n                  {\n                    label: t( 'Hot' ),\n                    value: 'hot',\n                  },\n                  {\n                    label: t( 'APR' ),\n                    value: 'apr',\n                  },\n                  {\n                    label: t( 'Multiplier' ),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t( 'Earned' ),\n                    value: 'earned',\n                  },\n                  {\n                    label: t( 'Liquidity' ),\n                    value: 'liquidity',\n                  },\n                ] }\n                onOptionChange={ handleSortOptionChange }\n              />\n            </LabelWrapper>\n            <SearchWrapper>\n              <Text textTransform=\"uppercase\">{ t( 'Search' ) }</Text>\n              <SearchInput onChange={ handleChangeQuery } placeholder=\"Search Farms\"/>\n            </SearchWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        { renderContent() }\n        { account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading/>\n          </Flex>\n        ) }\n        <div ref={ observerRef }/>\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}